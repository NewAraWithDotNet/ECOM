@model IEnumerable<OnlineOrderingSystem.Models.Product>

<div id="category-details-container" class="product-list">
    <h6>Top product</h6>

    @foreach (var product in Model)
    {
        <div class="product-card">
            <div class="card product-item border-0 mb-4 w-100">
                <div class="product-image-container">
                    <img class="product-image" src="~/images/@product.Image" alt="@product.Name">
                    <div class="footerend">
                        <a href="@Url.Action("DetailsProducts", "Products", new { id = product.Id })" class="btn btn-sm text-dark p-0">
                            <span class="icon-wrapper">
                                <i class="fas fa-eye"></i>
                            </span>
                        </a>
                    </div>

                </div>
                <div class="card-body">
                    
                    <div class="product-Name">
                        <h6 class="text-truncate mb-3">@product.Name</h6>
                    </div>
                    <div class="product-price">


                        <div class="price">
                            <h6><p class="card-text"><strong>Price:</strong> <span id="price-@product.Id">@product.Price.ToString("C")</span></p></h6>
                            <h6><p class="card-text">@product.HowMany pice</p></h6>

                        </div>

                    </div>
                </div>
            </div>
        </div>
    }
</div>
<style>
    .product-list {
        display: flex;
        gap: 2rem;
        justify-content: center;
    }

    .product-card {
        display: flex;
        flex-direction: row;
        gap: 1rem;
        border: 2px solid rgba(228, 228, 288, 0.9);
        border-radius: 15px;
        width: 250px;
        height: 300px;
        opacity: 0;
        transform: translateY(20px);
        transition: opacity 0.5s ease-out, transform 0.5s ease-out;
    }

        .product-card.in-view {
            opacity: 1;
            transform: translateY(0);
        }
    .product-image-container {
        position: relative;
        width: 100%;
        height: 20rem;
        overflow: hidden;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .product-image {
        padding: 20px;
        max-width: 100%;
        max-height: 100%;
        object-fit: cover;
        border-radius: 0.5rem;
        transition: opacity 0.5s ease, transform 0.5s ease;
    }

        .product-image:hover {
            transform: scale(1.1);
        }

    .footerend {
        position: absolute;
        bottom: 10px;
        left: 50%;
        transform: translateX(-50%);
        opacity: 0;
        transition: opacity 0.5s ease;
    }

    .product-image-container:hover .footerend {
        opacity: 1;
    }

    .product-details {
        display: flex;
        justify-content: space-between;
    }

    .card-body {
        display: flex;
        gap: 10px;
        flex-direction: column;
    }

    .icon-wrapper {
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: white;
        color: gray;
        border-radius: 4px;
        padding: 5px;
        border: 2px solid rgba(228, 228, 288);
    }

        .icon-wrapper i {
            color: gray;
            margin-right: 5px; /* Space between icon and text */
        }

    .price {
        display: flex;
        justify-content: space-between;
    }
</style>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        let observerOptions = {
            root: null,
            rootMargin: "0px",
            threshold: 0.1
        };

        let observer = new IntersectionObserver((entries, observer) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add("in-view");
                    observer.unobserve(entry.target); 
                }
            });
        }, observerOptions);

        document.querySelectorAll(".product-card").forEach(card => {
            observer.observe(card);
        });
    });
</script>